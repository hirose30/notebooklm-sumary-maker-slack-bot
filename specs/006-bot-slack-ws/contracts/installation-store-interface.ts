/**
 * Slack InstallationStore Interface Contract
 *
 * Defines the contract for storing and retrieving Slack OAuth installations
 * Implements @slack/oauth InstallationStore interface
 *
 * Reference: https://github.com/slackapi/node-slack-sdk/blob/main/packages/oauth/src/stores/installation-store.ts
 */

/**
 * Installation query parameters
 * Used to retrieve workspace-specific tokens from the store
 */
export interface InstallQuery {
  /**
   * Team (workspace) ID
   * Example: "T01ABCDEFGH"
   */
  teamId?: string;

  /**
   * Enterprise Grid ID (null for standard workspaces)
   * Example: "E01ABCDEFGH"
   */
  enterpriseId?: string;

  /**
   * User ID (for user token retrieval)
   * Example: "U01ABCDEFGH"
   */
  userId?: string;

  /**
   * Conversation ID (for org-wide app installations)
   * Example: "C01ABCDEFGH"
   */
  conversationId?: string;

  /**
   * Whether this is an Enterprise Grid installation
   */
  isEnterpriseInstall?: boolean;
}

/**
 * OAuth installation data
 * Returned by Slack OAuth flow, stored in InstallationStore
 */
export interface Installation {
  /**
   * Team information
   */
  team: {
    id: string; // Team ID (e.g., "T01ABCDEFGH")
    name: string; // Team name (e.g., "Acme Corp")
  };

  /**
   * Enterprise Grid information (null for standard workspaces)
   */
  enterprise?: {
    id: string; // Enterprise ID (e.g., "E01ABCDEFGH")
    name: string; // Enterprise name
  };

  /**
   * Bot user information (always present for bot installations)
   */
  bot?: {
    token: string; // Bot user OAuth token (xoxb-...)
    scopes: string[]; // Bot scopes (e.g., ["app_mentions:read", "chat:write"])
    id: string; // Bot ID (e.g., "B01ABCDEFGH")
    userId: string; // Bot user ID (e.g., "U01ABCDEFGH")
  };

  /**
   * Installing user information (optional)
   */
  user?: {
    token?: string; // User OAuth token (xoxp-...)
    scopes?: string[]; // User scopes
    id: string; // User ID
  };

  /**
   * App ID (always present)
   */
  appId?: string;

  /**
   * Token type (always "bot" for this use case)
   */
  tokenType?: 'bot' | 'user';

  /**
   * Whether this is an Enterprise Grid org-wide installation
   */
  isEnterpriseInstall?: boolean;

  /**
   * Installation metadata
   */
  installedAt?: Date;
}

/**
 * InstallationStore interface
 * Must be implemented by SQLiteInstallationStore
 */
export interface InstallationStore {
  /**
   * Store an installation
   * Called by Slack OAuth flow after successful installation
   *
   * @param installation - Installation data from OAuth flow
   * @param logger - Optional logger instance
   */
  storeInstallation(
    installation: Installation,
    logger?: Logger
  ): Promise<void>;

  /**
   * Fetch an installation
   * Called by Slack Bolt authorize function to retrieve workspace tokens
   *
   * @param query - Installation query parameters (teamId, enterpriseId, userId)
   * @param logger - Optional logger instance
   * @returns Installation data or undefined if not found
   */
  fetchInstallation(
    query: InstallQuery,
    logger?: Logger
  ): Promise<Installation | undefined>;

  /**
   * Delete an installation
   * Called when workspace uninstalls the app
   *
   * @param query - Installation query parameters (teamId, enterpriseId, userId)
   * @param logger - Optional logger instance
   */
  deleteInstallation(
    query: InstallQuery,
    logger?: Logger
  ): Promise<void>;
}

/**
 * Logger interface (compatible with @slack/logger)
 */
export interface Logger {
  debug(...msg: any[]): void;
  info(...msg: any[]): void;
  warn(...msg: any[]): void;
  error(...msg: any[]): void;
  setLevel(level: string): void;
  getLevel(): string;
  setName(name: string): void;
}

/**
 * Example Usage:
 *
 * ```typescript
 * import { App } from '@slack/bolt';
 * import { SQLiteInstallationStore } from './lib/installation-store';
 * import { db } from './lib/database';
 *
 * const installationStore = new SQLiteInstallationStore(db);
 *
 * const app = new App({
 *   signingSecret: config.slackSigningSecret,
 *   clientId: config.slackClientId,
 *   clientSecret: config.slackClientSecret,
 *   stateSecret: config.slackStateSecret,
 *   scopes: [
 *     'app_mentions:read',
 *     'chat:write',
 *     'channels:history',
 *     'groups:history',
 *     'im:history',
 *     'mpim:history'
 *   ],
 *   installationStore,
 *   socketMode: true,
 *   appToken: config.slackAppToken, // For Socket Mode
 * });
 *
 * // OAuth endpoints automatically created:
 * // - GET /slack/install
 * // - GET /slack/oauth_redirect
 *
 * // Authorize function is auto-generated by Bolt
 * // It calls installationStore.fetchInstallation({ teamId }) for each event
 * ```
 */

/**
 * Error Handling Contract:
 *
 * - storeInstallation MUST throw if database write fails
 * - fetchInstallation MUST return undefined (not throw) if installation not found
 * - fetchInstallation MUST throw if database query fails (not connectivity issue)
 * - deleteInstallation MUST succeed idempotently (deleting non-existent installation is OK)
 * - All methods MUST log errors before throwing
 * - All methods MUST include workspace context (teamId, enterpriseId) in error logs
 */
